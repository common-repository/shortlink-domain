<?php
/*
Plugin Name: Custom Shortlink Domain
Plugin URI: http://stv.whtly.com
Description: Allows you to specify the domain used for shortlinks generated by your blog.
Version: 0.1.3
Author: Steve Whiteley
Author URI: http://stv.whtly.com
License: GPL2
*/

class ShortlinkDomain {

	/**
	 * Human readable name, used for the settings input.
	 * @var string
	 */
	protected $_name = 'Shortlink Domain';

	/**
	 * Generic tag name used for prefixing settings / inputs.
	 * @var string
	 */
	protected $_tag = 'shortlink_domain';

	/**
	 * Current value of the custom shortlink domain.
	 * @var string
	 */
	protected $_domain = null;

	/**
	 * Add actions and filters to setup the custom shortlink domain.
	 * 
	 * @access public
	 */
	public function __construct()
	{
		$this->_domain = get_option( $this->_tag, null );
		if ( $this->_domain !== null ) {
			add_filter( 'get_shortlink', array( &$this, 'get_shortlink' ) );
		}
		add_action('admin_init', array( &$this ,'admin_init' ) );
	}

	/**
	 * Sets up the settings field shown on the permalink options page and
	 * checks / verifies any changes made to the custom domain.
	 * 
	 * @access public
	 */
	public function admin_init()
	{
   	 	if ( isset( $_POST[$this->_tag] ) ) {
			$this->validate_domain( $_POST[$this->_tag] );
		}
		add_settings_field(
			$this->_tag.'-id',
			$this->_name,
			array( &$this, 'setting_callback_function' ),
			'permalink',
			'optional',
			$this->_domain
		);
	}

	/**
	 * Validate, format and save the value stored for the custom domain.
	 * 
	 * @access public
	 * @param string $domain
	 */
	public function validate_domain( $domain )
	{
		if ( ! empty( $domain ) ) {
			$domain = esc_url_raw( $domain, array( 'http', 'https' ) );
			if ( '' == $domain ) {
				add_settings_error( $this->_name, $this->_tag, 'invalid url' );
			} else {
				$this->_domain = trailingslashit( esc_url_raw( $domain, array( 'http', 'https' ) ) );
				update_option( $this->_tag, $this->_domain );
			}
		} else {
			delete_option( $this->tag );
		}
	}

	/**
	 * Outputs the input box shown on the permalink settings page and sets the
	 * value to the current domain.
	 * 
	 * @access public
	 * @param string $domain
	 */
	public function setting_callback_function( $domain )
	{
 		?>
 		<input id="<?php echo $this->_tag; ?>"
			name="<?php echo $this->_tag; ?>"
			class="regular-text code"
			type="text"
			value="<?php esc_attr_e( $domain ); ?>"
		/>
 		<?php
	}

	/**
	 * Returns the shortlink for the current post if available, otherwise
	 * just the default domain is returned.
	 * 
	 * @access public
	 * @return string
	 */
	public function get_shortlink()
	{
		$domain = trailingslashit( $this->_domain );
		global $post;
		if ( $post ) {
			$domain .= '?p=' . $post->ID;
		}
		return $domain;
	}
	
	/**
	 * When the plugin is uninstalled, we should remove the options.
	 * 
	 * @access public
	 * @return boolean
	 */
	public static function uninstall()
	{
		if ( __FILE__ == WP_UNINSTALL_PLUGIN ) {
			return delete_option( $this->tag );
		}
		return false;
	}

}
	// Instantiate the class...
$shortlinkDomain = new ShortlinkDomain();
	// Register the uninstall hook...
register_uninstall_hook( __FILE__, array( 'ShortlinkDomain', 'uninstall' ) );
